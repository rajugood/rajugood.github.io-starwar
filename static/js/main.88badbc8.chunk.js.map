{"version":3,"sources":["Login.js","actions/actions.js","Dashboard.js","Navigation.js","serviceWorker.js","reducers/starwar.js","reducers/user.js","reducers/index.js","index.js","store/store.js"],"names":["Login","props","state","name","password","handleLogin","bind","handleInputChange","e","preventDefault","this","doLogin","event","target","value","setState","isLoggedIn","user","Fragment","className","class","type","onChange","onClick","isLoginError","to","Component","connect","userState","username","dispatch","a","async","fetch","response","json","data","count","results","birth_year","sessionStorage","setItem","Dashboard","planetDetails","handleLogOut","handlePlanetSelection","searchPlanets","url","doLogout","id","aria-label","aria-describedby","planets","map","planet","key","population","hideDetails","showDetails","details","Details","handleHideDetails","overlayClass","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","swState","search","removeItem","ValidateSession","children","rest","render","getItem","pathname","ValidateLogin","Boolean","window","location","hostname","match","INITIAL_STATE","combineReducers","currentState","action","payload","store","initialState","middlewares","thunk","createStore","rootReducer","compose","applyMiddleware","devToolsExtension","f","configureStore","__INITIAL_STATE__","ReactDOM","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88badbc8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { doLogin } from './actions/actions'\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            password: ''\r\n        }\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n\r\n    handleLogin(e) {\r\n        e.preventDefault();\r\n        this.props.doLogin(this.state.name, this.state.password);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const isLoggedIn = this.props.user.isLoggedIn;\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"sidenav\">\r\n                    <div className=\"login-main-text\">\r\n                        <h2>Application Login Page</h2>\r\n                        <p>Login from here to access.</p>\r\n                    </div>\r\n                </div>\r\n                {isLoggedIn === false ? (\r\n                    <div className=\"main\">\r\n                        <div class=\"login-form\">\r\n                            <form>\r\n                                <label className=\"login-label\">User Name: </label><input className=\"form-control\" type=\"text\" value={this.state.name} onChange={this.handleInputChange} name=\"name\" />\r\n\r\n                                <label className=\"login-label\">Password: </label><input className=\"form-control\" type=\"password\" value={this.state.password} onChange={this.handleInputChange} name=\"password\" />\r\n                                <br />\r\n                                <button className=\"btn btn-primary\" onClick={this.handleLogin}>Submit</button>\r\n                                {this.props.user.isLoginError ? (<span>Please provide valid username and password!</span>) : ''}\r\n                            </form>\r\n                        </div>\r\n\r\n                    </div>\r\n                ) : (<Redirect to=\"/dashboard\" />)}\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.userState\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { doLogin })(Login);","export const searchPlanets = (search) => async (dispatch) => {\r\n    try {\r\n        const response = await fetch('https://swapi.co/api/planets/?search=' + search);\r\n        const data = await response.json();\r\n        dispatch({ 'type': 'FETCH_PLANETS', 'payload': data.results });\r\n    }\r\n    catch (error) {\r\n        dispatch({ 'type': 'FETCH_PLANETS_FAILED' })\r\n    }\r\n}\r\n\r\nexport const planetDetails = (url) => async (dispatch) => {\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        dispatch({ 'type': 'GET_PLANET_DETAILS', 'payload': data });\r\n        dispatch({ 'type': 'SHOW_PLANET_DETAILS' });\r\n    }\r\n    catch (error) {\r\n        dispatch({ 'type': 'GET_PLANET_DETAILS_FAILED' })\r\n    }\r\n}\r\n\r\n\r\nexport const hideDetails = () =>  (dispatch) => {\r\n\r\n    dispatch({ 'type': 'HIDE_PLANET_DETAILS' });\r\n}\r\n\r\nexport const doLogin = (username, password) => async (dispatch) => {\r\n    try {\r\n        const response = await fetch('https://swapi.co/api/people/?search=' + username);\r\n        const data = await response.json();\r\n\r\n        if(data.count === 1 && data.results[0].birth_year === password){\r\n            sessionStorage.setItem('name', username);\r\n            sessionStorage.setItem('login', true);\r\n            dispatch({ 'type': 'LOGIN_SUCCESS', 'payload': data.results[0] });\r\n        }else{\r\n            dispatch({ 'type': 'LOGIN_FAIL' })\r\n        }\r\n        \r\n    }\r\n    catch (error) {\r\n        dispatch({ 'type': 'LOGIN_FAIL' })\r\n    }\r\n}\r\n\r\nexport const doLogout = (username, password) =>  (dispatch) => {\r\n    sessionStorage.removeItem('login');\r\n    sessionStorage.removeItem('name');\r\n    dispatch({ 'type': 'LOGOUT'});\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { searchPlanets, planetDetails, hideDetails, doLogout } from './actions/actions'\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            planetDetails: ''\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleLogOut = this.handleLogOut.bind(this);\r\n        this.handlePlanetSelection = this.handlePlanetSelection.bind(this);\r\n    }\r\n    handleInputChange(event) {\r\n        const value = event.target.value;\r\n        this.setState({ name: value });\r\n        this.props.searchPlanets(value);\r\n    }\r\n\r\n    handlePlanetSelection(url) {\r\n        // const planet = await fetch(url);\r\n        // const response = await planet.json();\r\n        // this.setState({planetDetails: response});\r\n        this.props.planetDetails(url);\r\n    }\r\n\r\n    handleLogOut() {\r\n        this.props.doLogout();\r\n    }\r\n    render() {\r\n        const isLoggedIn = this.props.user.isLoggedIn;\r\n        return (\r\n            <div className=\"dashboard\">\r\n                {isLoggedIn ? (\r\n                    <div>\r\n                        <div className=\"logout\">\r\n                            <label className=\"login-label\">\r\n                                {this.props.user.name} <button className=\"btn btn-secondary\" onClick={this.handleLogOut}>LogOut</button>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"search-list\">\r\n                            <div class=\"input-group input-group-lg\">\r\n                                <div class=\"input-group-prepend\">\r\n                                    <span class=\"input-group-text\" id=\"inputGroup-sizing-lg\">Search Planets</span>\r\n                                </div>\r\n                                <input type=\"text\" name=\"planet\" value={this.state.name} onChange={this.handleInputChange} class=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-lg\" />\r\n                            </div>\r\n\r\n                            <ul className=\"list-group\">\r\n                                {this.props.planets.map((planet) =>\r\n                                    <li className=\"list-group-item d-flex justify-content-between align-items-center\" onClick={this.handlePlanetSelection.bind(this, planet.url)} key={planet.name}>\r\n                                        {planet.name}\r\n                                        <span class=\"badge badge-primary badge-pill\">{planet.population}</span>\r\n                                    </li>\r\n                                )}\r\n                            </ul>\r\n\r\n                        </div>\r\n                        <br></br>\r\n                        <Details hideDetails={this.props.hideDetails} showDetails={this.props.showDetails} details={this.props.details} />\r\n\r\n                    </div>\r\n                )\r\n                    : (<Redirect to=\"/login\" />)}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        planets: state.swState.planets,\r\n        user: state.userState,\r\n        details: state.swState.details,\r\n        showDetails: state.swState.showDetails\r\n    };\r\n}\r\n\r\n\r\nclass Details extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleHideDetails = this.handleHideDetails.bind(this);\r\n    }\r\n\r\n    handleHideDetails() {\r\n        this.props.hideDetails();\r\n    }\r\n    render() {\r\n        const overlayClass = this.props.showDetails ? 'overlay-show' : 'overlay-hidden';\r\n\r\n        return (\r\n            <div>\r\n                {this.props.showDetails ? (<div>{this.props.details.name}</div>) : ('')}\r\n                <div id=\"popup2\" className={`overlay light ${overlayClass}`}>\r\n\r\n                    <div className=\"popup\">\r\n\r\n                        <h2>{this.props.details.name}</h2>\r\n                        <div className=\"content\">\r\n                            <p><strong>Rotation period: </strong> {this.props.details.rotation_period} </p>\r\n                            <p><strong>Orbital period: </strong> {this.props.details.orbital_period} </p>\r\n                            <p><strong>Diameter: </strong> {this.props.details.diameter} </p>\r\n                            <p><strong>climate: </strong> {this.props.details.climate} </p>\r\n                            <p><strong>gravity: </strong> {this.props.details.gravity} </p>\r\n                            <p><strong>terrain: </strong> {this.props.details.terrain} </p>\r\n                            <p><strong>surface_water: </strong> {this.props.details.surface_water} </p>\r\n                            <p><strong>population: </strong> {this.props.details.population} </p>\r\n                            \r\n                        </div>\r\n                        <br></br>\r\n                        <button type=\"button\" class=\"btn btn-secondary btn-sm\" onClick={this.handleHideDetails}>Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { searchPlanets, doLogout, planetDetails, hideDetails })(Dashboard);","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport Login from './Login';\r\nimport Dashboard from './Dashboard';\r\n\r\nexport default function Authenticate() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <ValidateSession path=\"/login\">\r\n                    <Login />\r\n                </ValidateSession>\r\n                <ValidateLogin path=\"/dashboard\">\r\n                    <Dashboard />\r\n                </ValidateLogin>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nfunction ValidateSession({ children, ...rest }) {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={() =>\r\n                sessionStorage.getItem('login') !== 'true' ? (\r\n                    children\r\n                ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/dashboard\"\r\n                            }}\r\n                        />\r\n                    )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nfunction ValidateLogin({ children, ...rest }) {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={() =>\r\n                sessionStorage.getItem('login') === 'true' ? (\r\n                    children\r\n                ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\"\r\n                            }}\r\n                        />\r\n                    )\r\n            }\r\n        />\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\r\n    planets: [],\r\n    details: {},\r\n    showDetails: false\r\n}\r\n\r\nexport const starwarreducer = (currentState = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_PLANETS':\r\n            return {\r\n                ...currentState,\r\n                planets: action.payload\r\n            }\r\n        case 'GET_PLANET_DETAILS':\r\n            return {\r\n                ...currentState,\r\n                details: action.payload\r\n            }\r\n        \r\n        case 'SHOW_PLANET_DETAILS':\r\n            return {\r\n                ...currentState,\r\n                showDetails: true\r\n            }\r\n            \r\n        case 'HIDE_PLANET_DETAILS':\r\n            return {\r\n                ...currentState,\r\n                showDetails: false\r\n            }\r\n\r\n        default:\r\n            return currentState;\r\n\r\n    }\r\n}","const INITIAL_STATE = {\r\n    isLoggedIn: false,\r\n    isLoginError: false,\r\n    name: ''\r\n}\r\n\r\nexport const userreducer = (currentState = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'LOGIN_SUCCESS':\r\n            return {\r\n                ...currentState,\r\n                isLoggedIn: true,\r\n                isLoginError: false,\r\n                name: action.payload.name\r\n            }\r\n        case 'LOGOUT':\r\n            return {\r\n                ...currentState,\r\n                isLoggedIn: false,\r\n                isLoginError: false,\r\n                name: ''\r\n            }\r\n        case 'LOGIN_FAIL':\r\n            return {\r\n                ...currentState,\r\n                isLoggedIn: false,\r\n                isLoginError: true,\r\n            }\r\n\r\n        default:\r\n            return currentState;\r\n\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { starwarreducer } from './starwar';\r\nimport { userreducer } from './user';\r\n\r\nexport default combineReducers({\r\n  swState: starwarreducer,\r\n  userState: userreducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap.css';\n// import App from './App';\n// import Login from './Login';\nimport Navigation from './Navigation'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store/store';\n\n\nconst store = configureStore(window.__INITIAL_STATE__);\nReactDOM.render(<Provider store={store}>\n    <Navigation />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore, compose, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nexport function configureStore(initialState = { userState: {isLoggedIn: sessionStorage.getItem('login') === 'true'? true : false, name: sessionStorage.getItem('name') || ''}}) {\r\n  const middlewares = [\r\n    thunk,\r\n  ];\r\n\r\n  const store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middlewares),\r\n    window.devToolsExtension ? window.devToolsExtension() : f => f // add support for Redux dev tools\r\n    )\r\n  );\r\n  return store;\r\n}"],"sourceRoot":""}